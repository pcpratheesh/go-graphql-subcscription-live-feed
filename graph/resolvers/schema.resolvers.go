package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"
	"time"

	"github.com/pcpratheesh/go-graphql-subcscription-live-feed/graph/generated"
	"github.com/pcpratheesh/go-graphql-subcscription-live-feed/graph/model"
)

// Trade is the resolver for the trade field.
func (r *queryResolver) Trade(ctx context.Context) ([]*model.TradeData, error) {
	return r.Trades, nil
}

// Demo is the resolver for the demo field.
func (r *queryResolver) Demo(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: Demo - demo"))
}

// LiveTrade is the resolver for the liveTrade field.
func (r *subscriptionResolver) LiveTrade(ctx context.Context, symbol string) (<-chan *model.TradeData, error) {
	var tradeChannel = make(chan *model.TradeData, 1)

	// context done check
	go func() {
		<-ctx.Done()
	}()

	// run a concurrent routine to send the data to subscribed client
	go func(tradeChannel chan *model.TradeData) {
		ticker := time.NewTicker(1 * time.Second)
		for {
			select {
			case <-ticker.C:
				tradeChannel <- r.GenerateTradeData()
			}
		}
	}(tradeChannel)

	return tradeChannel, nil
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
